SourceFile = StatementList .
Block = "{" StatementList "}" .
StatementList = { Statement ";" } .

Statement = 
            ExpressionStmt 
          | IfStmt
          | ForStmt
          | ReturnStmt
          | FunctionStmt
          | ImportDecl.

IfStmt       = "if" ExpressionStmt Block [ "else" ( IfStmt | Block ) ] .
ForStmt      = "for" ExpressionStmt "as" [ identifier "," ] identifier Block .
ReturnStmt   = "return" ExpressionStmt .
ImportDecl   = "import" string_lit ["as" identifier] .
FunctionStmt = "func" ParameterList Block .

ParameterList =  
    "(" 
        [ 
            identifier { "," identifier } [","]      /* optional trailing comma */
        ]    
    ")" .

ExpressionStmt = 
              UnaryExpr    { Decorator } [ ExpressionStmt ]
            | RuleExpr     { Decorator } [ ExpressionStmt ]
            | Assignment   { Decorator } [ ExpressionStmt ]
            | FunctionCall { Decorator } [ ExpressionStmt ].

UnaryExpr = identifier | Literal | unary_op UnaryExpr .
unary_op   = "+" | "-" | "!" | "not" .
Literal     = BasicLit | ListLit | MapLit | FunctionLit | RuleLit .
BasicLit    = int_lit | float_lit | string_lit | bool_lit .

RuleLit = RuleExpr .
FunctionLit    = "func" Function .
Function       = Parameters FunctionBody .
FunctionBody   = Block .
Parameters     = "(" [ IdentifierList [ "," ] ] ")" .
IdentifierList = identifier { "," identifier } .

bool_lit = "true" | "false" .
ListLit  = 
    "[" 
        [ ElementList [","] ]  /* optional trailing comma */
    "]" .

ElementList      = Element { "," Element } .
Element          = Literal | ExpressionStmt .
MapLit           = "{" [ KeyedElementList [ "," ] ] "}" .
KeyedElementList = KeyedElement { "," KeyedElement } .
KeyedElement     = Element ":" Element .

RuleExpr = "rule" "{" ExpressionStmt "}" .
Decorator =
      BinaryExpr
    | Selector
    | Index
    | Slice
    | Arguments .

Selector       = "." identifier .
Index          = "[" ExpressionStmt "]" .
Slice          = "[" [ ExpressionStmt ] ":" [ ExpressionStmt ] "]" 
               | "[" [ ExpressionStmt ] ":" ExpressionStmt ":" ExpressionStmt "]" .

BinaryExpr = binary_op ExpressionStmt .
binary_op  = logical_op | set_op | rel_op | add_op | mul_op | else_op .
logical_op = "and" | "or" | "xor" .
set_op     = ["not"] ( "contains" | "in" ).
rel_op     = "==" | "!=" | "<" | "<=" | ">" | ">=" | "is" | "is not" | "matches" | "not matches" .
else_op    = "else" .
add_op     = "+" | "-" .
mul_op     = "*" | "/" | "%" .

Assignment = identifier { Decorator } assign_op ExpressionStmt .
assign_op  = [ add_op | mul_op ] "=" .

FunctionCall = identifier Arguments.
Arguments =
    "(" 
        [ 
            ExpressionStmt { "," ExpressionStmt }   
        ]    
    ")" .

newline        = /* the Unicode code point U+000A */ .
unicode_char   = /* an arbitrary Unicode code point except newline */ .
unicode_letter = /* a Unicode code point classified as "Letter" */ .
unicode_digit  = /* a Unicode code point classified as "Number, decimaldigit" */ .

letter        = unicode_letter | "_" .
identifier    = letter { letter | unicode_digit } .

octal_digit = 
        "0" | "1" | "2" | "3" | "4" 
      | "5" | "6" | "7" .

decimal_digit = octal_digit | "8" | "9" .
hex_digit = decimal_digit | "A" | "B" | "C" | "D" | "E" | "F"
                          | "a" | "b" | "c" | "d" | "e" | "f" .

keywords = "all" | "any" | "as" | "for" | "func" | "if"
         | "import" | "else" | "null" | "return" | "rule" 
         | "undefined" .

operators = "+"  | "-"  | "*" | "/"  | "%" | "+="  | "/=" 
          | "%/" | "==" | "<" | `\>` | "=" | "!"   | "!="
          | "<=" | ">=" | "(" | ")"  | "[" | "]"   | "{"
          | "}"  | ","  | "." | ":"  | ";" | "and" | "or"
          | "contains" | "in" | "is" | "matches" 
          | "not" | "xor" | "else" .

int_lit     = decimal_lit | octal_lit | hex_lit .
decimal_lit = decimal_digit { decimal_digit }.
octal_lit   = "0" { octal_digit } .
hex_lit     = "0" ( "x" | "X" ) hex_digit { hex_digit } .

float_lit = decimal_lit "." [ decimal_lit ] [ exponent ] |
            decimal_lit exponent |
            "." decimal_lit [ exponent ] .

exponent  = ( "e" | "E" ) [ "+" | "-" ] decimal_lit .

string_lit       = `"` { unicode_value | byte_value } `"` .
unicode_value    = unicode_char | little_u_value | big_u_value | escaped_char .
byte_value       = octal_byte_value | hex_byte_value .
octal_byte_value = `\` octal_digit octal_digit octal_digit .
hex_byte_value   = `\` "x" hex_digit hex_digit .
little_u_value   = `\` "u" hex_digit hex_digit hex_digit hex_digit .
big_u_value      = `\` "U" hex_digit hex_digit hex_digit hex_digit
                           hex_digit hex_digit hex_digit hex_digit .
escaped_char     = `\` ( "a" | "b" | "f" | "n" | "r" | "t" | "v" | `\` | `"` ) .
